# Fix the reporting module with proper HTML escaping
reporting_content = '''"""
Reporting Module for MalSim Pro
Generates comprehensive analysis reports
"""

import json
import os
from datetime import datetime
from typing import Dict, Any
from database.analysis_db import AnalysisDB
from dashboard.analytics import AnalyticsEngine

class ReportGenerator:
    def __init__(self, db: AnalysisDB, analytics: AnalyticsEngine):
        self.db = db
        self.analytics = analytics
        self.report_dir = './reports'
        
        # Ensure reports directory exists
        os.makedirs(self.report_dir, exist_ok=True)
    
    def generate_session_report(self, session_id: str, format: str = 'html') -> str:
        """Generate a comprehensive report for a specific session"""
        
        # Get session data
        sessions = self.db.get_sessions()
        session = next((s for s in sessions if s['session_id'] == session_id), None)
        
        if not session:
            raise ValueError(f"Session {session_id} not found")
        
        # Get analysis
        analysis = self.analytics.analyze_session(session_id)
        
        # Generate report content
        report_data = {
            'session_info': session,
            'analysis': analysis,
            'generated_at': datetime.now().isoformat(),
            'report_type': 'detailed_analysis'
        }
        
        if format.lower() == 'json':
            return self._generate_json_report(report_data, session_id)
        else:
            return self._generate_html_report(report_data, session_id)
    
    def _generate_html_report(self, data: Dict[str, Any], session_id: str) -> str:
        """Generate HTML report"""
        
        # Create CSS styles
        css_styles = """
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; }
        .warning { background: #fff3cd; border-color: #ffc107; padding: 10px; }
        .metric { display: inline-block; margin: 10px; padding: 15px; 
                  background: #f8f9fa; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        """
        
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>MalSim Pro - Analysis Report</title>
    <style>
        {css_styles}
    </style>
</head>
<body>
    <div class="header">
        <h1>üî¨ MalSim Pro - Malware Analysis Report</h1>
        <p>Session: {session_id}</p>
        <p>Generated: {data['generated_at']}</p>
    </div>
    
    <div class="warning">
        ‚ö†Ô∏è <strong>Educational Simulation:</strong> This report is based on safe malware 
        simulation data for educational purposes. No real threats were analyzed.
    </div>
    
    <div class="section">
        <h2>üìä Executive Summary</h2>
        <div class="metric">
            <strong>Malware Type:</strong><br>
            {data['session_info']['malware_type'].title()}
        </div>
        <div class="metric">
            <strong>Threat Level:</strong><br>
            {data['analysis']['threat_level'].title()}
        </div>
        <div class="metric">
            <strong>Risk Score:</strong><br>
            {data['analysis']['risk_score']:.2f}/1.0
        </div>
        <div class="metric">
            <strong>Duration:</strong><br>
            {data['session_info'].get('duration', 0)} seconds
        </div>
    </div>
    
    <div class="section">
        <h2>üîç Analysis Details</h2>
        <p>Comprehensive analysis of the simulated malware behavior.</p>
        
        <h3>Recommendations:</h3>
        <ul>
            {''.join([f'<li>{rec}</li>' for rec in data['analysis']['recommendations']])}
        </ul>
    </div>
    
    <div class="section">
        <h2>üìã Technical Details</h2>
        <p><strong>Session Configuration:</strong></p>
        <pre>{json.dumps(data['session_info'], indent=2)}</pre>
    </div>
    
    <footer style="margin-top: 50px; padding: 20px; background: #f8f9fa; text-align: center;">
        <p>Generated by MalSim Pro - Educational Malware Analysis Platform</p>
        <p>‚ö†Ô∏è For educational and training purposes only</p>
    </footer>
</body>
</html>
        """
        
        # Save report
        filename = f"report_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        filepath = os.path.join(self.report_dir, filename)
        
        with open(filepath, 'w') as f:
            f.write(html_content)
        
        return filepath
    
    def _generate_json_report(self, data: Dict[str, Any], session_id: str) -> str:
        """Generate JSON report"""
        filename = f"report_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = os.path.join(self.report_dir, filename)
        
        with open(filepath, 'w') as f:
            json.dump(data, f, indent=2)
        
        return filepath
    
    def generate_summary_report(self) -> str:
        """Generate a summary report of all sessions"""
        sessions = self.db.get_sessions()
        stats = self.db.get_statistics()
        
        summary_data = {
            'total_sessions': len(sessions),
            'statistics': stats,
            'recent_sessions': sessions[:10] if sessions else [],
            'generated_at': datetime.now().isoformat()
        }
        
        filename = f"summary_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = os.path.join(self.report_dir, filename)
        
        with open(filepath, 'w') as f:
            json.dump(summary_data, f, indent=2)
        
        return filepath
'''

with open('MalSimPro/dashboard/reporting.py', 'w') as f:
    f.write(reporting_content)

print("‚úÖ Created reporting.py - Comprehensive report generation (fixed)")